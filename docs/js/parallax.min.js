let viewportTop=document.documentElement.clientHeight,parallaxParent=(768<window.innerWidth&&window.addEventListener("scroll",parallaxHome),document.querySelectorAll("[data-parallax-parent]")),parallaxElement=document.querySelectorAll("[data-parallax-element]"),smallerElement,smallerElementHeight,smallerElementSpeed,parentHeight,heightDifference,tranfsorm,currentTransform;function parallaxHome(e){parallaxParent.forEach(e=>{e.getBoundingClientRect().top<=+viewportTop&&0<e.getBoundingClientRect().top+e.getBoundingClientRect().height&&(smallerElement=e.firstElementChild.getBoundingClientRect().height>e.firstElementChild.nextElementSibling.getBoundingClientRect().height?e.firstElementChild.nextElementSibling:e.firstElementChild,parentHeight=e.getBoundingClientRect().height,smallerElementHeight=smallerElement.getBoundingClientRect().height,heightDifference=parentHeight-smallerElementHeight,smallerElementSpeed=parentHeight/heightDifference,tranfsorm=window.pageYOffset/smallerElementSpeed,(currentTransform=parseInt(smallerElement.style.transform.match(/[-0-9.]+(?=px)/)))<heightDifference||window.pageYOffset<heightDifference||window.pageYOffset<currentTransform)&&window.pageYOffset<parentHeight&&(smallerElement.style.transform=`translateY(${tranfsorm}px)`)})}console.log(parallaxElement),parallaxElement.forEach(e=>{e.style.transform="translateY(0px)"}),parallaxHome(),window.addEventListener("scroll",parallaxImage);let parallaxImages=document.querySelectorAll("[data-parallax-image]"),elHeight,elSpeed,elPosition;parallaxImages.forEach(e=>{e.style.transform="translateY(0px)",e.style.opacity="0",e.style.transition="opacity 2s ease 1s"});let viewNum;function parallaxImage(e){parallaxImages.forEach(e=>{viewNum=window.innerWidth<769?.9:1,e.getBoundingClientRect().top<=viewportTop/viewNum&&0<e.getBoundingClientRect().top+e.getBoundingClientRect().height&&(e.style.opacity="1",elHeight=e.getBoundingClientRect().height,elPosition=window.pageYOffset+e.getBoundingClientRect().top,elSpeed=elHeight/e.nextElementSibling.getBoundingClientRect().height,tranfsorm=window.pageYOffset/elPosition*elHeight-elHeight,e.style.transform=`translateY(${tranfsorm}px)`)})}parallaxImage(),window.addEventListener("scroll",parallaxShip);let parallaxShipInCircle=document.querySelectorAll("[data-parallax-ship]"),shipHeight,shipSpeed,shipPosition;function parallaxShip(e){parallaxShipInCircle.forEach(e=>{e.getBoundingClientRect().top<=viewportTop/.9&&0<(e.getBoundingClientRect().top+e.getBoundingClientRect().height)/2&&(shipHeight=e.getBoundingClientRect().height,shipPosition=window.pageYOffset+e.getBoundingClientRect().top,tranfsorm=window.pageYOffset/shipPosition*shipHeight-shipHeight,e.style.transform=`translate(${tranfsorm}px, -50%)`)})}parallaxShip();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
